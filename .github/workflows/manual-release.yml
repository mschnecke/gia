name: Manual Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prev_tag: ${{ steps.changelog.outputs.prev_tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Detect Version
      id: version
      run: |
        # Always generate version from commit count (like build.rs)
        COMMIT_COUNT=$(git rev-list --count HEAD)
        VERSION="v0.1.$COMMIT_COUNT"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "GitHub Actions"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate Changelog
      id: changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the previous release tag
        PREV_TAG=$(gh release list --limit 10 --json tagName --jq '.[].tagName' | grep -v "${{ steps.version.outputs.version }}" | head -1 || echo "")

        # Store previous tag for later use
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to HEAD"
          CHANGELOG=$(gh api repos/:owner/:repo/compare/$PREV_TAG...HEAD --jq '.commits[] | "- " + .commit.message')
        else
          echo "No previous tag found, using all recent commits"
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" -10)
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for build.rs version generation

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc

    - name: Build Windows Release
      run: cargo build --release --target x86_64-pc-windows-msvc

    - name: Upload Windows Binary
      uses: actions/upload-artifact@v4
      with:
        name: gia-windows
        path: target/x86_64-pc-windows-msvc/release/gia.exe
        retention-days: 1

  build-macos-intel:
    runs-on: macos-13  # Intel runner
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for build.rs version generation

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: x86_64-apple-darwin

    - name: Build macOS Intel Release
      run: cargo build --release --target x86_64-apple-darwin

    - name: Upload macOS Intel Binary
      uses: actions/upload-artifact@v4
      with:
        name: gia-macos-intel
        path: target/x86_64-apple-darwin/release/gia
        retention-days: 1

  build-macos-arm:
    runs-on: macos-latest  # ARM runner
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for build.rs version generation

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin

    - name: Build macOS ARM Release
      run: cargo build --release --target aarch64-apple-darwin

    - name: Upload macOS ARM Binary
      uses: actions/upload-artifact@v4
      with:
        name: gia-macos-arm
        path: target/aarch64-apple-darwin/release/gia
        retention-days: 1

  create-release:
    needs: [detect-version, build-windows, build-macos-intel, build-macos-arm]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download Windows Binary
      uses: actions/download-artifact@v4
      with:
        name: gia-windows
        path: ./artifacts/windows

    - name: Download macOS Intel Binary
      uses: actions/download-artifact@v4
      with:
        name: gia-macos-intel
        path: ./artifacts/macos-intel

    - name: Download macOS ARM Binary
      uses: actions/download-artifact@v4
      with:
        name: gia-macos-arm
        path: ./artifacts/macos-arm

    - name: Create Release and Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CHANGELOG="${{ needs.detect-version.outputs.changelog }}"
        NOTES="## Changelog"$'\n'"$CHANGELOG"

        # Add Full Changelog link if we have a previous release
        PREV_TAG="${{ needs.detect-version.outputs.prev_tag }}"
        if [ -n "$PREV_TAG" ]; then
          NOTES="$NOTES"$'\n\n'"**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ needs.detect-version.outputs.version }}"
        fi

        echo "$NOTES" > release_notes.txt

        echo "Final release notes:"
        cat release_notes.txt

        # Create release
        gh release create "${{ needs.detect-version.outputs.version }}" \
          --title "Release ${{ needs.detect-version.outputs.version }}" \
          --notes-file "release_notes.txt"

        # Upload binaries with custom names
        gh release upload "${{ needs.detect-version.outputs.version }}" \
          ./artifacts/windows/gia.exe#gia-windows-x86_64.exe \
          ./artifacts/macos-intel/gia#gia-macos-x86_64 \
          ./artifacts/macos-arm/gia#gia-macos-aarch64
