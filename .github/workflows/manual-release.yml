name: Manual Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Detect Version
      id: version
      run: |
        # Try to get the latest git tag
        $LATEST_TAG = ""
        try {
          $LATEST_TAG = git describe --tags --abbrev=0 2>$null
        } catch {
          Write-Host "No tags found"
        }

        if ($LATEST_TAG) {
          Write-Host "Using existing tag: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $env:GITHUB_OUTPUT
        } else {
          # Generate version from commit count (like build.rs)
          $COMMIT_COUNT = git rev-list --count HEAD
          $VERSION = "v0.1.$COMMIT_COUNT"
          Write-Host "Generated new version: $VERSION"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        }

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc

    - name: Build Windows Release
      run: cargo build --release --target x86_64-pc-windows-msvc

    - name: Generate Changelog
      id: changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the previous release tag
        $PREV_TAG = ""
        try {
          $PREV_TAG = gh release list --limit 10 --json tagName --jq '.[].tagName' | Where-Object { $_ -ne "${{ steps.version.outputs.version }}" } | Select-Object -First 1
        } catch {
          Write-Host "No previous releases found"
        }

        # Store previous tag for later use
        echo "prev_tag=$PREV_TAG" >> $env:GITHUB_OUTPUT

        if ($PREV_TAG) {
          Write-Host "Generating changelog from $PREV_TAG to HEAD"
          $CHANGELOG = gh api repos/:owner/:repo/compare/$PREV_TAG...HEAD --jq '.commits[] | "- " + .commit.message' | Out-String
        } else {
          Write-Host "No previous tag found, using all recent commits"
          $CHANGELOG = git log --oneline --pretty=format:"- %s" -10 | Out-String
        }

        # Escape quotes and special characters for PowerShell
        $CHANGELOG = $CHANGELOG -replace '"', '\"' -replace '`', '``'

        echo "changelog<<EOF" >> $env:GITHUB_OUTPUT
        echo $CHANGELOG >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

    - name: Create Release and Upload Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use only auto-generated changelog
        $CHANGELOG = @"
        ${{ steps.changelog.outputs.changelog }}
        "@ -replace '"', '\"' -replace '`', '``'

        $NOTES = "## Changelog`n" + $CHANGELOG

        # Add Full Changelog link if we have a previous release
        $PREV_TAG = "${{ steps.changelog.outputs.prev_tag }}"
        if ($PREV_TAG -and $PREV_TAG.Trim() -ne "") {
          $NOTES = $NOTES + "`n`n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ steps.version.outputs.version }}"
        }

        # Write notes to file
        $NOTES | Out-File -FilePath "release_notes.txt" -Encoding UTF8

        Write-Host "Final release notes:"
        Write-Host $NOTES

        gh release create "${{ steps.version.outputs.version }}" `
          --title "Release ${{ steps.version.outputs.version }}" `
          --notes-file "release_notes.txt" `
          target/x86_64-pc-windows-msvc/release/gia.exe
